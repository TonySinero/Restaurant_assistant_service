// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"
	domain "restaurant-assistant/internal/domain"

	gomock "github.com/golang/mock/gomock"
)


// MockRestaurant is a mock of Restaurant interface.
type MockRestaurant struct {
	ctrl     *gomock.Controller
	recorder *MockRestaurantMockRecorder
}

// MockRestaurantMockRecorder is the mock recorder for MockRestaurant.
type MockRestaurantMockRecorder struct {
	mock *MockRestaurant
}

// NewMockRestaurant creates a new mock instance.
func NewMockRestaurant(ctrl *gomock.Controller) *MockRestaurant {
	mock := &MockRestaurant{ctrl: ctrl}
	mock.recorder = &MockRestaurantMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRestaurant) EXPECT() *MockRestaurantMockRecorder {
	return m.recorder
}

// CreateRestaurant mocks base method.
func (m *MockRestaurant) CreateRestaurant(input domain.Restaurant) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRestaurant", input)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRestaurant indicates an expected call of CreateRestaurant.
func (mr *MockRestaurantMockRecorder) CreateRestaurant(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRestaurant", reflect.TypeOf((*MockRestaurant)(nil).CreateRestaurant), input)
}

// DeleteRestaurant mocks base method.
func (m *MockRestaurant) DeleteRestaurant(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRestaurant", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRestaurant indicates an expected call of DeleteRestaurant.
func (mr *MockRestaurantMockRecorder) DeleteRestaurant(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRestaurant", reflect.TypeOf((*MockRestaurant)(nil).DeleteRestaurant), id)
}

// GetAllRestaurant mocks base method.
func (m *MockRestaurant) GetAllRestaurant(input domain.GetRestaurantOrderBy) ([]domain.GetRestaurant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRestaurant", input)
	ret0, _ := ret[0].([]domain.GetRestaurant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRestaurant indicates an expected call of GetAllRestaurant.
func (mr *MockRestaurantMockRecorder) GetAllRestaurant(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRestaurant", reflect.TypeOf((*MockRestaurant)(nil).GetAllRestaurant), input)
}

// GetRestaurantById mocks base method.
func (m *MockRestaurant) GetRestaurantById(id string) (domain.GetRestaurant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRestaurantById", id)
	ret0, _ := ret[0].(domain.GetRestaurant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRestaurantById indicates an expected call of GetRestaurantById.
func (mr *MockRestaurantMockRecorder) GetRestaurantById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRestaurantById", reflect.TypeOf((*MockRestaurant)(nil).GetRestaurantById), id)
}

// UpdateRestaurant mocks base method.
func (m *MockRestaurant) UpdateRestaurant(id string, input domain.UpdateRestaurant) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRestaurant", id, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRestaurant indicates an expected call of UpdateRestaurant.
func (mr *MockRestaurantMockRecorder) UpdateRestaurant(id, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRestaurant", reflect.TypeOf((*MockRestaurant)(nil).UpdateRestaurant), id, input)
}

// MockDish is a mock of Dish interface.
type MockDish struct {
	ctrl     *gomock.Controller
	recorder *MockDishMockRecorder
}

// MockDishMockRecorder is the mock recorder for MockDish.
type MockDishMockRecorder struct {
	mock *MockDish
}

// NewMockDish creates a new mock instance.
func NewMockDish(ctrl *gomock.Controller) *MockDish {
	mock := &MockDish{ctrl: ctrl}
	mock.recorder = &MockDishMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDish) EXPECT() *MockDishMockRecorder {
	return m.recorder
}

// CreateDish mocks base method.
func (m *MockDish) CreateDish(input domain.Dish) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDish", input)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDish indicates an expected call of CreateDish.
func (mr *MockDishMockRecorder) CreateDish(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDish", reflect.TypeOf((*MockDish)(nil).CreateDish), input)
}

// DeleteDish mocks base method.
func (m *MockDish) DeleteDish(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDish", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDish indicates an expected call of DeleteDish.
func (mr *MockDishMockRecorder) DeleteDish(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDish", reflect.TypeOf((*MockDish)(nil).DeleteDish), id)
}

// GetAllDishes mocks base method.
func (m *MockDish) GetAllDishes() ([]domain.GetAllDishes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDishes")
	ret0, _ := ret[0].([]domain.GetAllDishes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDishes indicates an expected call of GetAllDishes.
func (mr *MockDishMockRecorder) GetAllDishes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDishes", reflect.TypeOf((*MockDish)(nil).GetAllDishes))
}

// GetDishByID mocks base method.
func (m *MockDish) GetDishByID(id string) (domain.Dish, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDishByID", id)
	ret0, _ := ret[0].(domain.Dish)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDishByID indicates an expected call of GetDishByID.
func (mr *MockDishMockRecorder) GetDishByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDishByID", reflect.TypeOf((*MockDish)(nil).GetDishByID), id)
}

// GetDishByRestaurantID mocks base method.
func (m *MockDish) GetDishByRestaurantID(id string) ([]domain.GetAllDishes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDishByRestaurantID", id)
	ret0, _ := ret[0].([]domain.GetAllDishes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDishByRestaurantID indicates an expected call of GetDishByRestaurantID.
func (mr *MockDishMockRecorder) GetDishByRestaurantID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDishByRestaurantID", reflect.TypeOf((*MockDish)(nil).GetDishByRestaurantID), id)
}

// UpdateDish mocks base method.
func (m *MockDish) UpdateDish(id string, input domain.UpdateDish) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDish", id, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDish indicates an expected call of UpdateDish.
func (mr *MockDishMockRecorder) UpdateDish(id, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDish", reflect.TypeOf((*MockDish)(nil).UpdateDish), id, input)
}

// MockFile is a mock of File interface.
type MockFile struct {
	ctrl     *gomock.Controller
	recorder *MockFileMockRecorder
}

// MockFileMockRecorder is the mock recorder for MockFile.
type MockFileMockRecorder struct {
	mock *MockFile
}

// NewMockFile creates a new mock instance.
func NewMockFile(ctrl *gomock.Controller) *MockFile {
	mock := &MockFile{ctrl: ctrl}
	mock.recorder = &MockFileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFile) EXPECT() *MockFileMockRecorder {
	return m.recorder
}

// UploadAndSaveFile mocks base method.
func (m *MockFile) UploadAndSaveFile(ctx context.Context, file domain.File, uuid, path string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadAndSaveFile", ctx, file, uuid, path)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadAndSaveFile indicates an expected call of UploadAndSaveFile.
func (mr *MockFileMockRecorder) UploadAndSaveFile(ctx, file, uuid, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadAndSaveFile", reflect.TypeOf((*MockFile)(nil).UploadAndSaveFile), ctx, file, uuid, path)
}
